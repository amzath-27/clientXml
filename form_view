
package swing;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;
import java.util.List;
import javax.swing.*;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.util.JAXBSource;
import javax.xml.namespace.QName;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.ws.Dispatch;
import javax.xml.ws.Service;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.http.HTTPBinding;
import java.util.ArrayList;
import org.xml.sax.SAXException;

import controller.*;

/**
 *
 * @author idriss
 */
public class Form_view {
    private Curriculum cv;
    information_perso pers;
    /*
        Attributs pour la frame.
     */
    private JFrame frame;
	private JButton add, ajouter_champs;
	private JComboBox<String> jcb;
	private JTextField lastName, firstName, adresse, tel;
        
	//Map servant à stocker à quoi correspond le tableau de JTextField.
    private Map<String, JTextField[]> map;
	private JPanel panel;
        private int  nb_experience, nb_langue;
        /*
        Pour pouvoir envoyer le CV
     */
        private Service service;
    private JAXBContext jc;
	private static final QName qname = new QName("", "");
	private static final String URL = "http://localhost:8080/webxml-1.0-SNAPSHOT/rest/resume/";
      private boolean add_possible = false;
      
        public Form_view() {
        cv = new Curriculum();
        try {
            jc = JAXBContext.newInstance(Curriculum.class, Listecv.class, competence.class, experience_pro.class, information_perso.class, langue.class);
        } catch (JAXBException je) {
            System.out.println("Cannot create JAXBContext " + je);
        }
        
        createView();

		placeComponents();
		createController();
                
		nb_experience = 0;
		nb_langue = 0;
		
	}

        private void createView() {
		Curriculum cv = new Curriculum();
		frame = new JFrame("CV --- Ajouter un CV ---");
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(frame);
            //force chaque composant de la fenêtre à appeler sa méthode updateUI
        } catch (InstantiationException | ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException e) {
        }
		ajouter_champs = new JButton("Ajouter les champs");
		map = new TreeMap<String, JTextField[]>();
		jcb = new JComboBox<String>();
		add = new JButton("Ajouter le CV a la base");
		jcb.addItem("Experience");		
		jcb.addItem("Langue");
		//jcb.addItem("Information_perso");
		panel = new JPanel(new GridLayout(0,1));
        lastName = new JTextField("Nom", 20);
        firstName = new JTextField("Prenom", 20);
        adresse = new JTextField("Adresse", 20);
        tel = new JTextField("Telephone", 20);
	}
        
        private void placeComponents() {
		JPanel p = new JPanel(); {
			p.add(jcb);
			p.add(ajouter_champs);
			p.add(add);
		}
		frame.add(p, BorderLayout.NORTH);
        JPanel tmp1 = new JPanel(); {
            tmp1.add(firstName);
            tmp1.add(lastName);
            tmp1.add(adresse);
            tmp1.add(tel);

        }
        panel.add(tmp1);
        
        JPanel tmp;
        JTextField[] tab;
		
		tab = new JTextField[2];
		tab[0] = new JTextField("Date experience", 20);
		tab[1] = new JTextField("Description", 20);
		
        map.put("Experience"+nb_experience++, tab);
		tmp = new JPanel(new GridLayout(1, 3)); {
			tmp.add(new JLabel("Experience : "));
			for (int i = 0; i < 2; i ++) {
				tmp.add(tab[i]);
			}
		}
		panel.add(tmp);
               
		tab = new JTextField[1];
		tab[0] = new JTextField("Nom", 20);
		
        map.put("Langue"+nb_langue++, tab);
		tmp = new JPanel(new GridLayout(1, 2)); {
			tmp.add(new JLabel("Langue : "));
			for (int i = 0; i < 1; i ++) {
				tmp.add(tab[i]);
			}
		}
		panel.add(tmp);
		frame.add(panel);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	
	}
        
        private void createController() {
		ajouter_champs.addActionListener(new ActionListener() {			
			@Override
			public void actionPerformed(ActionEvent e) {
				String item = (String) jcb.getSelectedItem();
				 if (item.equals("Experience")) {
					JTextField[] tab = new JTextField[2];
					tab[0] = new JTextField("Date experience", 20);
					tab[1] = new JTextField("description experience", 20);
					map.put("Experience"+nb_experience, tab);
					JPanel tmp = new JPanel(new GridLayout(1, 3)); {
						tmp.add(new JLabel("Experience : "));
						for (int i = 0; i < 2; i ++) {
							tmp.add(tab[i]);
						}
					}
					panel.add(tmp);
					frame.revalidate();
					nb_experience++;
				} else if (item.equals("Langue")) {
					JTextField[] tab = new JTextField[1];
					tab[0] = new JTextField("Nom", 20);
					map.put("Langue"+nb_langue, tab);
					//System.out.println(map.get("Langue"+nb_langue).length);
					JPanel tmp = new JPanel(new GridLayout(1, 2)); {
						tmp.add(new JLabel("Langue : "));
						for (int i = 0; i < 1; i ++) {
							tmp.add(tab[i]);
						}
					}
					panel.add(tmp);
					frame.revalidate();
					nb_langue++;
					
				}
				frame.pack();
			}
		});
        add.addActionListener(new ActionListener() {
            @Override 
            public void actionPerformed(ActionEvent e) {
                List<langue> langues = new ArrayList<langue>();
                //langue langues = new langue();
               List<experience_pro>  exp = new ArrayList<experience_pro>();
                
                for (String s : map.keySet()) {
                    JTextField[] tab = map.get(s);
                    
                    if (s.contains("Langue")) {
                        String nom;
                        if (!tab[0].getText().equals("Nom") && !tab[0].getText().isEmpty())
                            nom = tab[0].getText();
                        else
                            nom = "";
                        langues.add(new langue(nom));
                        
                    } else if (s.contains("Experience")) {
                        String experience;
                        String date;
                        if (!tab[0].getText().equals("Date experience") && !tab[0].getText().isEmpty())
                            date = tab[0].getText();
                        else
                            date = "";
                        if (!tab[1].getText().equals("description experience") && !tab[1].getText().isEmpty())
                            experience = tab[1].getText();
                        else
                            experience = "";
                        exp.add(new experience_pro(date, experience));
                        
                    } 
                }
                
                if (!lastName.getText().isEmpty() && !lastName.getText().equals("Nom")){
                  pers =  cv.getInfo_persos();
                    pers.setNom(lastName.getText());}
                    //cv.setLastName(lastName.getText());
                else
                   // cv.setLastName("");
                    pers.setNom("");
                
                if (!firstName.getText().isEmpty() && !firstName.getText().equals("Prenom")){
                    //cv.setFirstName(firstName.getText());
                     pers =  cv.getInfo_persos();
                    pers.setPrenom(firstName.getText());}
                else
                    pers.setPrenom("");
                
              //  langue langues = new langue();
               
                //experience_pro exp = new experience_pro();
                cv.setExperiences_pro(exp);
                cv.setLangues(langues);
                new CV_View(cv, frame);
                try {
                    send();
                } catch (JAXBException e1) {
                    e1.printStackTrace();
                } catch(NullPointerException n) {

                }
                add_possible = true;
            }
        });
	}

        private void send() throws JAXBException {
        service = Service.create(qname);
        service.addPort(qname, HTTPBinding.HTTP_BINDING, URL);
        Dispatch<Source> dispatcher = service.createDispatch(qname,
                Source.class, Service.Mode.MESSAGE);
        Map<String, Object> requestContext = dispatcher.getRequestContext();
        requestContext.put(MessageContext.HTTP_REQUEST_METHOD, "PUT");
        dispatcher.invoke(new JAXBSource(jc, cv));
    }
public Curriculum getCv() {
        return cv;
    }
    public boolean isAdd_possible() {
        return add_possible;
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Form_view();
            }
        });
    }
}
